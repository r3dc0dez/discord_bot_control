<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings - Discord Bot Control Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
</head>
<body class="bg-gray-900 text-white">
    <div class="min-h-screen">
        <!-- Navigation -->
        <nav class="bg-gray-800 border-b border-gray-700">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex items-center justify-between h-16">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <h1 class="text-xl font-bold">Discord Bot Control</h1>
                        </div>
                        <div class="hidden md:block">
                            <div class="ml-10 flex items-baseline space-x-4">
                                <a href="/" class="text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Dashboard</a>
                                <a href="/servers" class="text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Servers</a>
                                <a href="/messages" class="text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Messages</a>
                                <a href="/settings" class="bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-medium">Settings</a>
                            </div>
                        </div>
                    </div>
                    <div class="flex items-center">
                        <div class="text-gray-300 flex items-center">
                            <% if (typeof bot !== 'undefined' && bot && bot.avatar) { %>
                                <img src="https://cdn.discordapp.com/avatars/<%= bot.id %>/<%= bot.avatar %>.png" alt="Bot Avatar" class="w-8 h-8 rounded-full mr-2">
                            <% } %>
                            <span class="text-sm font-medium"><%= typeof bot !== 'undefined' && bot ? bot.tag : 'Bot Offline' %></span>
                        </div>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
            <div class="px-4 py-6 sm:px-0">
                <!-- Bot Settings -->
                <div class="bg-gray-800 shadow rounded-lg mb-6">
                    <div class="px-4 py-5 sm:p-6">
                        <h3 class="text-lg leading-6 font-medium text-white mb-4">
                            Bot Settings
                        </h3>
                        
                        <!-- Default Activity -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-400 mb-2">
                                Default Activity
                            </label>
                            <div class="flex space-x-4">
                                <select id="defaultActivityType" class="bg-gray-700 text-white rounded-md px-3 py-2">
                                    <option value="PLAYING">Playing</option>
                                    <option value="LISTENING">Listening to</option>
                                    <option value="WATCHING">Watching</option>
                                    <option value="COMPETING">Competing in</option>
                                </select>
                                <input type="text" id="defaultActivityText" 
                                    value="@mkl.08 / @pomcodes"
                                    class="flex-1 bg-gray-700 text-white rounded-md px-3 py-2">
                                <button onclick="saveDefaultActivity()" 
                                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md">
                                    Save
                                </button>
                            </div>
                        </div>

                        <!-- Auto Response -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-400 mb-2">
                                Auto Response
                            </label>
                            <div class="space-y-4">
                                <div>
                                    <input type="text" id="triggerPhrase" placeholder="Trigger phrase" 
                                        class="w-full bg-gray-700 text-white rounded-md px-3 py-2 mb-2">
                                    <textarea id="responseText" placeholder="Response message" 
                                        class="w-full bg-gray-700 text-white rounded-md px-3 py-2 h-24"></textarea>
                                </div>
                                <button onclick="addAutoResponse()" 
                                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md">
                                    Add Response
                                </button>
                            </div>
                            <div id="autoResponseList" class="mt-4 space-y-2">
                                <!-- Auto responses will be listed here -->
                            </div>
                        </div>

                        <div class="mt-4">
                            <input type="text" id="searchTrigger" placeholder="Search trigger phrases..." 
                                class="w-full bg-gray-700 text-white rounded-md px-3 py-2 mb-2">
                        </div>

                        <!-- Command Prefix -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-400 mb-2">
                                Command Prefix
                            </label>
                            <div class="flex space-x-4">
                                <input type="text" id="commandPrefix" placeholder="!" 
                                    class="w-32 bg-gray-700 text-white rounded-md px-3 py-2">
                                <button onclick="saveCommandPrefix()" 
                                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md">
                                    Save
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Notification Settings -->
                <div class="bg-gray-800 shadow rounded-lg mb-6">
                    <div class="px-4 py-5 sm:p-6">
                        <h3 class="text-lg leading-6 font-medium text-white mb-4">
                            Notification Settings
                        </h3>
                        <div class="space-y-4">
                            <div class="flex items-center justify-between">
                                <span class="text-sm text-gray-400">New Message Notifications</span>
                                <label class="switch">
                                    <input type="checkbox" id="newMessageNotif">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                            <div class="flex items-center justify-between">
                                <span class="text-sm text-gray-400">Member Join/Leave Notifications</span>
                                <label class="switch">
                                    <input type="checkbox" id="memberNotif">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                            <div class="flex items-center justify-between">
                                <span class="text-sm text-gray-400">Server Update Notifications</span>
                                <label class="switch">
                                    <input type="checkbox" id="serverNotif">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Danger Zone -->
                <div class="mt-8">
                    <h2 class="text-xl font-bold text-red-500 mb-4">Danger Zone</h2>
                    <div class="bg-gray-800 p-4 rounded-lg border border-red-500">
                        <!-- Give Admin -->
                        <div class="mb-6">
                            <h3 class="text-lg font-medium text-white mb-2">Give Administrator</h3>
                            <div class="space-y-2">
                                <input type="text" id="adminGuildId" placeholder="Server ID" 
                                    class="w-full bg-gray-700 text-white rounded-md px-3 py-2">
                                <input type="text" id="adminUserId" placeholder="User ID" 
                                    class="w-full bg-gray-700 text-white rounded-md px-3 py-2">
                                <button onclick="giveAdmin()" 
                                    class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md">
                                    Give Admin Role
                                </button>
                            </div>
                        </div>

                        <!-- Kick Member -->
                        <div class="border-t border-red-500 pt-6">
                            <h3 class="text-lg font-medium text-white mb-2">Kick Member</h3>
                            <div class="space-y-2">
                                <input type="text" id="kickGuildId" placeholder="Server ID" 
                                    class="w-full bg-gray-700 text-white rounded-md px-3 py-2">
                                <input type="text" id="kickUserId" placeholder="User ID" 
                                    class="w-full bg-gray-700 text-white rounded-md px-3 py-2">
                                <button onclick="kickMember()" 
                                    class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md">
                                    Kick Member
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        function saveDefaultActivity() {
            const type = document.getElementById('defaultActivityType').value;
            const text = document.getElementById('defaultActivityText').value;
            socket.emit('update-default-activity', { type, text });
        }

        function addAutoResponse() {
            const trigger = document.getElementById('triggerPhrase').value;
            const response = document.getElementById('responseText').value;
            if (trigger && response) {
                socket.emit('add-auto-response', { trigger, response });
                document.getElementById('triggerPhrase').value = '';
                document.getElementById('responseText').value = '';
            }
        }

        function saveCommandPrefix() {
            const prefix = document.getElementById('commandPrefix').value;
            if (prefix) {
                socket.emit('update-command-prefix', { prefix });
            }
        }

        // Handle responses from server
        socket.on('settings-updated', (response) => {
            if (response.success) {
                // Show success message
                alert('Settings updated successfully!');
            } else {
                // Show error message
                alert('Error updating settings: ' + response.error);
            }
        });

        // Load current settings
        socket.on('current-settings', (settings) => {
            document.getElementById('defaultActivityType').value = settings.activityType;
            document.getElementById('defaultActivityText').value = settings.activityText;
            document.getElementById('commandPrefix').value = settings.prefix;
            document.getElementById('newMessageNotif').checked = settings.notifications.newMessage;
            document.getElementById('memberNotif').checked = settings.notifications.memberUpdates;
            document.getElementById('serverNotif').checked = settings.notifications.serverUpdates;

            // Load auto responses
            const autoResponseList = document.getElementById('autoResponseList');
            autoResponseList.innerHTML = settings.autoResponses.map(ar => `
                <div class="bg-gray-700 p-3 rounded flex justify-between items-center">
                    <div>
                        <div class="font-medium">${ar.trigger}</div>
                        <div class="text-sm text-gray-400">${ar.response}</div>
                    </div>
                    <button onclick="deleteAutoResponse('${ar.id}')" 
                        class="text-red-500 hover:text-red-400">
                        Delete
                    </button>
                </div>
            `).join('');
        });

        function deleteAutoResponse(id) {
            socket.emit('delete-auto-response', { id });
        }

        // Save notification settings
        document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                const settings = {
                    newMessage: document.getElementById('newMessageNotif').checked,
                    memberUpdates: document.getElementById('memberNotif').checked,
                    serverUpdates: document.getElementById('serverNotif').checked
                };
                socket.emit('update-notifications', settings);
            });
        });

        // Danger Zone Functions
        function giveAdmin() {
            const guildId = document.getElementById('adminGuildId').value.trim();
            const userId = document.getElementById('adminUserId').value.trim();
            
            if (!guildId || !userId) {
                alert('Please enter both Server ID and User ID');
                return;
            }

            if (confirm('Are you sure you want to give administrator permissions to this user?')) {
                socket.emit('give-admin', { guildId, userId });
            }
        }

        function kickMember() {
            const guildId = document.getElementById('kickGuildId').value.trim();
            const userId = document.getElementById('kickUserId').value.trim();
            
            if (!guildId || !userId) {
                alert('Please enter both Server ID and User ID');
                return;
            }

            if (confirm('Are you sure you want to kick this member?')) {
                socket.emit('kick-member', { guildId, userId });
            }
        }

        socket.on('admin-given', (response) => {
            if (response.success) {
                alert('Administrator role given successfully!');
                document.getElementById('adminGuildId').value = '';
                document.getElementById('adminUserId').value = '';
            } else {
                alert('Error giving admin role: ' + response.error);
            }
        });

        socket.on('member-kicked', (response) => {
            if (response.success) {
                alert('Member kicked successfully!');
                document.getElementById('kickGuildId').value = '';
                document.getElementById('kickUserId').value = '';
            } else {
                alert('Error kicking member: ' + response.error);
            }
        });

        // Search auto-responses
        let searchTimeout;
        document.getElementById('searchTrigger').addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                const searchTerm = e.target.value;
                if (searchTerm) {
                    socket.emit('search-auto-responses', { trigger: searchTerm });
                } else {
                    // If search is empty, show all responses
                    socket.emit('current-settings', {});
                }
            }, 300);
        });

        socket.on('search-results', (response) => {
            if (response.success) {
                updateAutoResponseList(response.results);
            }
        });

        function updateAutoResponseList(responses) {
            const autoResponseList = document.getElementById('autoResponseList');
            autoResponseList.innerHTML = responses.map(ar => `
                <div class="bg-gray-700 p-3 rounded flex justify-between items-center">
                    <div>
                        <div class="font-medium">${ar.trigger}</div>
                        <div class="text-sm text-gray-400">${ar.response}</div>
                    </div>
                    <button onclick="deleteAutoResponse('${ar.id}')" 
                        class="text-red-500 hover:text-red-400">
                        Delete
                    </button>
                </div>
            `).join('');
        }
    </script>
</body>
</html>
